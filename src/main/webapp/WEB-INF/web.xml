<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd"
         version="6.0">

  <display-name>MSAL Servlet Auth</display-name>

  <session-config>
    <session-timeout>2</session-timeout>
    <cookie-config>
      <http-only>true</http-only>
      <secure>true</secure>
    </cookie-config>
    <tracking-mode>COOKIE</tracking-mode>
  </session-config>

  <security-constraint>
    <web-resource-collection>
      <web-resource-name>Secure URLs</web-resource-name>
      <url-pattern>/secure/*</url-pattern>
    </web-resource-collection>
    <user-data-constraint>
      <transport-guarantee>CONFIDENTIAL</transport-guarantee>
    </user-data-constraint>
  </security-constraint>
</web-app>


package com.fiserv.radm.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

import com.fiserv.radm.security.CustomLDAPAuthenticationProvider;
import com.fiserv.radm.security.DelegatingAuthenticationProvider;

@Configuration
@EnableWebSecurity(debug = true)
@ComponentScan(basePackages = "com.fiserv.radm")
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {

	@Autowired
	DelegatingAuthenticationProvider delegateAuthProvider;
	
	@Autowired
	CustomLDAPAuthenticationProvider customAuthProvider;

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.csrf().disable().authorizeRequests().antMatchers("/", "/logout").permitAll()
				// Parameters
				.antMatchers("/markerBank")
				.hasAnyRole("paramMarkerBankRead","paramMarkerBankWrite")
				.antMatchers("/maintainParameter")
				.hasAnyRole("paramMaintainParameterRead","paramMaintainParameterWrite")
				.antMatchers("/clearingBank")
				.hasAnyRole("paramClearingBankRead","paramClearingBankWrite")
				.antMatchers("/groupName")
				.hasAnyRole("paramGroupNameRead","paramGroupNameWrite")
				.antMatchers("/agentISOBank")
				.hasAnyRole("paramAgentISOBankRead","paramAgentISOBankWrite")
				.antMatchers("/initialParamXcludeList")
				.hasAnyRole("paramBlazeMerchExcludRead","paramBlazeMerchExcludWrite")
				.antMatchers("/parmBlazeExclud")
				.hasAnyRole("paramBlazePortExcludRead","paramBlazePortExcludWrite")
				.antMatchers("/viewWatchDef")
				.hasAnyRole("paramMaintainWatchlistRead","paramMaintainDeferralRead","paramMaintainWatchlistWrite","paramMaintainDeferralWrite")
				.antMatchers("/maintainWatchlist")
				.hasAnyRole("paramMaintainWatchlistRead","paramMaintainWatchlistWrite")
				.antMatchers("/maintainDeferral")
				.hasAnyRole("paramMaintainDeferralRead","paramMaintainDeferralWrite")
				.antMatchers("/maintainChrgbckRsnCd")
				.hasAnyRole("paramMaintainChrgbckRsnCdRead","paramMaintainChrgbckRsnCdWrite")
				.antMatchers("/paramXchangeRte")
				.hasAnyRole("paramXchangeRteRead","paramXchangeRteWrite")
				.antMatchers("/parmUpdtScanOfbase")
				.hasAnyRole("paramUpdtScanOfbaseRead","paramUpdtScanOfbaseWrite")
				.antMatchers("/maintainBlazeCode")
				.hasAnyRole("paramMaintainBlazeCodeRead","paramMaintainBlazeCodeWrite")
				.antMatchers("/parmBAMcutLimits")
				.hasAnyRole("paramBAMcutLimitsRead","paramBAMcutLimitsWrite")
				.antMatchers("/parmSICCode")
				.hasAnyRole("paramSICCodeRead","paramSICCodeWrite")
				.antMatchers("/parmSrcTypInitialLoad")
				.hasAnyRole("paramSrcTypInitialLoadRead","paramSrcTypInitialLoadWrite")
				.antMatchers("/radmParmAchRjck")
				.hasAnyRole("paramAchRjckRead","paramAchRjckWrite")
				.antMatchers("/radmParmScanBase")
				.hasAnyRole("paramScanBaseRead","paramScanBaseWrite")
				.antMatchers("/maintainParmRedFlag")
				.hasAnyRole("paramRedFlagRead","paramRedFlagWrite")
				.antMatchers("/maintainVCnclRsnCd")
				.hasAnyRole("paramMaintainVCnclRsnCdRead","paramMaintainVCnclRsnCdWrite")
				.antMatchers("/maintainParmMiscRsn")
				.hasAnyRole("paramMaintainParmMiscRsnRead","paramMaintainParmMiscRsnWrite")
				.antMatchers("/maiRiskCalculation")
				.hasAnyRole("paramMaiRiskCalculationRead","paramMaiRiskCalculationWrite")
				.antMatchers("/tmrParameter")
				.hasAnyRole("paramTmrParameterRead","paramTmrParameterWrite")
				.antMatchers("/evenAmtParameter")
				.hasAnyRole("paramEvenAmtParameterRead","paramEvenAmtParameterWrite")
				.antMatchers("/maintainCheckParm")
				.hasAnyRole("paramMaintainCheckParmRead","paramMaintainCheckParmWrite")
				.antMatchers("/maintainProgExpCd")
				.hasAnyRole("paramMaintainProgExpCdRead","paramMaintainProgExpCdWrite")
				.antMatchers("/clientBnkOmaha")
				.hasAnyRole("paramClientBnkOmahaRead","paramClientBnkOmahaWrite")
				// Hierarchy
				.antMatchers("/unitGroupings")
				.hasAnyRole("hierUnitGroupingsRead","hierUnitGroupingsWrite")
				.antMatchers("/portfolioToChanlIndList")
				.hasAnyRole("hierPortfolioToChanlIndMapRead","hierPortfolioToChanlIndMapWrite")
				.antMatchers("/portfolioToMarkerLevelList")
				.hasAnyRole("hierPortfolioToMarkerLevelRead","hierPortfolioToMarkerLevelWrite")
				.antMatchers("/getHierarchyTree")
				.hasAnyRole("hierGetHierarchyTreeRead")
				.antMatchers("/maintainMrkrVsProdCd")
				.hasAnyRole("hierMaintainMrkrVsProdCdRead","hierMaintainMrkrVsProdCdWrite")
				.antMatchers("/flow")
				.hasAnyRole("hierDsFlowRead","hierDsFlowWrite")
				// Rules and Report
				.antMatchers("/ruleBrowserInitialLoad")
				.hasAnyRole("ruleReportRead", "ruleReportWrite")
				.antMatchers("/reportBrowserInitialLoad")
				.hasAnyRole("ruleReportRead", "ruleReportWrite")
				.antMatchers("/loadRuleBatchTestInitialLoad")
				.hasAnyRole("ruleReportRead", "ruleReportWrite")
				.antMatchers("/ruleCatBrowserInitialLoad")
				.hasAnyRole("ruleReportRead", "ruleReportWrite")
				.antMatchers("/ruleTypBrowserInitialLoad")
				.hasAnyRole("ruleReportRead", "ruleReportWrite")
				// Dslr Config
				.antMatchers("/maintainDslrTables")
				.hasAnyRole("dslrTableRead","dslrTableWrite")
				// G2 Web Monitoring
				.antMatchers("/g2Uploads")
				.hasAnyRole("g2WebMonitoring")
				//User Maintenance
				.antMatchers("/userMaintenance")
				.hasAnyRole("userMaintenance")
				.antMatchers("/privilegeMaintenance")
				.hasAnyRole("userMaintenance")
				.antMatchers("/viewUserRoles")
				.hasAnyRole("userMaintenance")
				// Login/Error/Logout
				.anyRequest().authenticated().and().formLogin().loginPage("/")
				.loginProcessingUrl("/login").usernameParameter("username").passwordParameter("password")
				.failureUrl("/loginError").defaultSuccessUrl("/home", true).permitAll().and().logout()
				.logoutUrl("/logout").logoutSuccessUrl("/").permitAll().and().exceptionHandling()
				.accessDeniedPage("/error");
		http.sessionManagement().invalidSessionUrl("/");
		//http.headers().contentSecurityPolicy("default-src 'self' 'unsafe-inline' http: https:; script-src 'self' 'unsafe-inline' http: https:; style-src 'self' 'unsafe-inline' http: https:; img-src 'self' 'unsafe-inline' http: https: data:;");
	}

	@Autowired
	protected void configure(AuthenticationManagerBuilder auth) {
		auth.authenticationProvider(delegateAuthProvider);
//		auth.authenticationProvider(customAuthProvider);
	}

	@Override
	public void configure(WebSecurity web) throws Exception {
		web.ignoring().antMatchers("/resources/**", "/css/**");
	}

}

package com.fiserv.radm.security;

import java.util.Hashtable;
import java.util.Map.Entry;
import java.util.Set;

import javax.naming.Context;
import javax.naming.NamingException;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

import com.fiserv.radm.entity.User;
import com.fiserv.radm.entity.UserPrincipal;
import com.fiserv.radm.repository.UserRepo;

@Component
public class DelegatingAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {
	private static String OS = System.getProperty("os.name").toLowerCase();
	private final static String contextFactory = "com.sun.jndi.ldap.LdapCtxFactory";
	private static Logger logger = Logger.getLogger(DelegatingAuthenticationProvider.class);
	@Autowired
	UserRepo userRepo;
	@Value("${ldapURL}")
	private String url;
	@Value("${ldapDomain}")
	private String domain;
	@Value("${ldapTimeOut}")
	private String authTimeOut;

	@Override
	protected void additionalAuthenticationChecks(UserDetails userDetails,
			UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {
		String username = authentication.getName();
		try {
			if (!OS.contains("win"))
				authenticate(username, authentication.getCredentials().toString(), authTimeOut);
		} catch (NamingException e) {
			e.printStackTrace();
			throw new UsernameNotFoundException("1dc authentication failed", e);
		}
	}

	@Override
	protected UserDetails retrieveUser(String username, UsernamePasswordAuthenticationToken authentication)
			throws AuthenticationException {
		UserPrincipal userPrincipal = null;
		try {
			username = username.toUpperCase();
			User user = userRepo.findByUsername(username).orElse(null);
			if (user == null)
				throw new UsernameNotFoundException("Username is not valid");
			userPrincipal = new UserPrincipal(user);
//			if (!authenticate(username, authentication.getCredentials().toString(), authTimeOut))
//				throw new LdapAuthenticationException("1dc authentication failed");
		} catch (Exception e) {
			e.printStackTrace();
			throw new UsernameNotFoundException("Username is not valid");
		}
		return userPrincipal;
	}

	public boolean authenticate(String username, String password, String authTimeOut) throws NamingException {
		boolean flag = false;
		Hashtable<String, Object> env = new Hashtable<String, Object>();
		env.put(Context.SECURITY_AUTHENTICATION, "simple");
		env.put(Context.SECURITY_PRINCIPAL, username + "@" + domain);
		env.put(Context.SECURITY_CREDENTIALS, password);

		Set<Entry<String, Object>> e = env.entrySet();
		for (Entry<String, Object> entry : e) {
			if (!entry.getKey().equals(Context.SECURITY_CREDENTIALS))
				logger.debug("LDAP env values: " + entry.getKey() + ": " + entry.getValue());
		}
		ldapContext(env, authTimeOut);
		flag = true;
		return flag;
	}

	private LdapContext ldapContext(Hashtable<String, Object> env, String authTimeOut) throws NamingException {
		env.put(Context.INITIAL_CONTEXT_FACTORY, contextFactory);
		env.put(Context.PROVIDER_URL, url);
		env.put(Context.SECURITY_PROTOCOL, "TLSv1.2");
		env.put("com.sun.jndi.ldap.connect.timeout", authTimeOut);
		return new InitialLdapContext(env, null);
	}
}
package com.fiserv.radm.entity;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

public class UserPrincipal implements UserDetails {
	private static final long serialVersionUID = 1L;
	private User user;
	private List<GrantedAuthority> authorities;
	private List<String> instances;

	public UserPrincipal(User user) {
		this.user = user;
	}

	public void setAuthorities(List<GrantedAuthority> authorities) {
		this.authorities = (List<GrantedAuthority>) authorities;
	}

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		authorities = new ArrayList<GrantedAuthority>();

		// Extract list of roles with ROLE_ as prefix
		this.user.getUserRoles().forEach(role -> {
			GrantedAuthority auth = new SimpleGrantedAuthority("ROLE_" + role.getUserRole());
			authorities.add(auth);
		});
		
		Set<String> menuRoles = new HashSet<String>();
		for (UserRoles role : this.user.getUserRoles()) {
			if (role.getUserRole().startsWith("hier")) {
				menuRoles.add("hier");
			} else if (role.getUserRole().startsWith("param")) {
				menuRoles.add("param");
			} else if (role.getUserRole().startsWith("ruleReport")) {
				menuRoles.add("ruleReport");
			}
		}
		
		menuRoles.forEach(role -> {
			GrantedAuthority auth = new SimpleGrantedAuthority("ROLE_" + role);
			authorities.add(auth);
		});

		return authorities;
	}

	public List<String> getInstances() {

		// Extract list of instances using the GrantedAuthority
		// Tweaking the GrantedAuthority usually used for Permissions and Roles but using them for Instances
		
		instances = new ArrayList<String>();
		this.user.getUserInstances().forEach(instance -> {
			instances.add(instance.getUserInstc());
		});
		return instances;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Override
	public String getPassword() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getUsername() {
		// TODO Auto-generated method stub
		return this.user.getUsername();
	}

	@Override
	public boolean isAccountNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean isEnabled() {
		// TODO Auto-generated method stub
		return user.getIsactive().equals("Y");
	}

}
<!DOCTYPE html>
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1" isELIgnored="false"%>
<html>
<head>
<!-- <meta http-equiv="Content-Security-Policy" -->
<!-- 	content="script-src 'self' 'strict-dynamic'; frame-ancestors 'self'; img-src 'self' data: http: https:; ;object-src 'none'; base-uri 'none'; "> -->
<link rel="stylesheet"
	href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
<link rel="stylesheet"
	href="<%=request.getContextPath()%>/resources/css/footer.css"></link>
<link rel="stylesheet"
	href="https://use.fontawesome.com/releases/v5.8.2/css/all.css">
<link rel="stylesheet"
	href="<%=request.getContextPath()%>/resources/css/login.css">
<!--  Toastr notifications -->
<link href="<%=request.getContextPath()%>/resources/css/toastr.min.css"
	rel="stylesheet">
<link href="<%=request.getContextPath()%>/resources/css/styles.css"
	rel="stylesheet">
<script type="text/javascript" src="<%=request.getContextPath()%>/resources/js/common.js"></script>
<link rel="stylesheet" href="<%=request.getContextPath()%>/resources/css/common.css" type="text/css">
<script
	src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
<script
	src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="<%=request.getContextPath()%>/resources/js/toastr.min.js"></script>
<script type="text/javascript">
	toastr.options.preventDuplicates = true;
	toastr.options = {
		"preventDuplicates" : true,
		"closeButton" : true,
		"debug" : false,
		"newestOnTop" : true,
		"progressBar" : true,
		"positionClass" : "toast-top-right",
		"onclick" : null,
		"showDuration" : "250",
		"hideDuration" : "1000",
		"timeOut" : "5000",
		"extendedTimeOut" : "0",
		"showEasing" : "swing",
		"hideEasing" : "linear",
		"showMethod" : "fadeIn",
		"hideMethod" : "fadeOut"
	}

	function validate() {
		if ($('#username').val() == "") {
			toastr["error"]("Please enter a valid username", "Error");
			return false;
		} else if ($('#password').val() == "") {
			toastr["error"]("Please enter a valid password", "Error");
			return false;
		}
	}
</script>
</head>
<body onload="focus()" style="overflow: hidden;">
	<div class="wrapper">
		<nav class="navbar navbar-default navTopBar">
			<div class="container-fluid">
				<div class="col-md-1">
					<img src="<%=request.getContextPath()%>/resources/images/logo1.png"
						alt="Fiserv Logo">
				</div>
				<div class="col-md-3">
					<div class="navbar-header">
						<a class="navbar-brand navHeader"> Risk Aggregation &amp;
							Detection Administration </a>
					</div>
				</div>
				<div class="col-md-4"></div>
				<div class="col-md-3">
				</div>
			</div>
			<div id="loader-spinner"></div>
		</nav>
		<div class="wrapperLogin fadeInDown">
			<div id="formContent">
				<!-- Tabs Titles -->
				<!-- Icon -->
				<div class="fadeIn first heading">
					<!--       <h3>GLOBAL SANCTION SYSTEM</h3> -->
					<h3>RAD Administration</h3>
				</div>
				<!-- Login Form -->
				<form name="loginForm" action="/RAD-M/login" method='POST'>
					<div>
						<div class="error">
							<p style="margin-bottom: 0rem;">${returnMessge}</p>
						</div>
						<i class="fas fa-user sign"></i><input type="text" id="username"
							name="username" class="fadeIn second" autofocus="autofocus"
							placeholder="Please enter your IDC ID"></input>
					</div>
					<div>
						<i class="fas fa-key sign"></i><input type="password"
							id="password" name="password" class="fadeIn third"
							autofocus="autofocus" placeholder="Please enter your password"></input>
					</div>
					<input type="submit" class="fadeIn fourth loginBtn" value="Log In"
						autofocus="autofocus" onclick="return validate()"
						style="font-family: Arial"></input>
				</form>
			</div>
		</div>
	</div>
	<footer class="footer" id="footer"
		style="position: absolute !important;">
		<div class="container" style="padding-top: 10px;">
			<ul>
				<li style="color: white;">�<span id="copyrightYear">2020</span>
					Fiserv, Inc. or its affiliates
				</li>
				<li><a data-bind="text: Title, attr: { href: ComputedUrl() }"
					href="https://www.fiserv.com/en/about-fiserv/privacy-notice.html"
					target="_blank">Privacy Policy</a></li>
				<!-- /ko -->
			</ul>

			<div class="footer-logo">
				<a href="http://www.fiserv.com" target="_blank"> <img
					class="desktop"
					src="<%=request.getContextPath()%>/resources/images/logo1.png"
					alt="Fiserv Logo" width="58" height="30" data-themekey="#">
				</a>
			</div>

			<script type="text/javascript">
				var currentDate = new Date();
				var currentYear = currentDate.getYear();
				if (currentYear < 1000)
					currentYear += 1900;

				jQuery("#copyrightYear").html(currentYear);
			</script>
		</div>
		<!--/container-->
	</footer>
</body>
</html>
